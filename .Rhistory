colnames(table) <- c(dataName)
rownames(table) <- c("Mean", "Median", "Mode", "SD")
knitr::kable(table)
}
AC17_mean = mean(AC17)
AC17_median = median(AC17)
AC17_mode = findmode(AC17) # User defined
AC17_sd = sd(AC17)
dataSummary(AC17_mean, AC17_median, AC17_mode, AC17_sd, "AC17") # User defined
hist(AC17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(AC17)
AC17_upper = AC17_mean + AC17_sd
AC17_lower = AC17_mean - AC17_sd
AC17_withinOneSd = which((AC17 <= AC17_upper) & (AC17 >= AC17_lower))
AC17_percentage = (length(AC17_withinOneSd) / length(AC17)) * 100
AC17_percentage
ACavgs14_16 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
AC17 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
PPavgs14_16 = round(rnorm(36, runif(1, 33, 37), sqrt(runif(1, 6, 8))), 1)
PP17 = round(rnorm(36, runif(1, 33, 37), sqrt( runif(1, 6, 8))), 1)
knitr::kable(matrix(ACavgs14_16, ncol=12), caption = "ACavgs14_16")
knitr::kable(matrix(AC17, ncol=12), caption = "AC17")
knitr::kable(matrix(PPavgs14_16, ncol=12), caption = "PPavgs14_16")
knitr::kable(matrix(PP17, ncol=12), caption = "PP17")
findmode <- function(data) {
uniqueValue <- unique(data)
uniqueValue[which.max(tabulate(match(data, uniqueValue)))]
}
dataSummary <- function(mean, median, mode, sd, dataName) {
table = matrix(c(mean, median, mode, sd), ncol=1, byrow=TRUE)
colnames(table) <- c(dataName)
rownames(table) <- c("Mean", "Median", "Mode", "SD")
knitr::kable(table)
}
AC17_mean = mean(AC17)
AC17_median = median(AC17)
AC17_mode = findmode(AC17) # User defined
AC17_sd = sd(AC17)
dataSummary(AC17_mean, AC17_median, AC17_mode, AC17_sd, "AC17") # User defined
hist(AC17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(AC17)
AC17_upper = AC17_mean + AC17_sd
AC17_lower = AC17_mean - AC17_sd
AC17_withinOneSd = which((AC17 <= AC17_upper) & (AC17 >= AC17_lower))
AC17_percentage = (length(AC17_withinOneSd) / length(AC17)) * 100
AC17_percentage
ACavgs14_16 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
AC17 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
PPavgs14_16 = round(rnorm(36, runif(1, 33, 37), sqrt(runif(1, 6, 8))), 1)
PP17 = round(rnorm(36, runif(1, 33, 37), sqrt( runif(1, 6, 8))), 1)
knitr::kable(matrix(ACavgs14_16, ncol=12), caption = "ACavgs14_16")
knitr::kable(matrix(AC17, ncol=12), caption = "AC17")
knitr::kable(matrix(PPavgs14_16, ncol=12), caption = "PPavgs14_16")
knitr::kable(matrix(PP17, ncol=12), caption = "PP17")
findmode <- function(data) {
uniqueValue <- unique(data)
uniqueValue[which.max(tabulate(match(data, uniqueValue)))]
}
dataSummary <- function(mean, median, mode, sd, dataName) {
table = matrix(c(mean, median, mode, sd), ncol=1, byrow=TRUE)
colnames(table) <- c(dataName)
rownames(table) <- c("Mean", "Median", "Mode", "SD")
knitr::kable(table)
}
AC17_mean = mean(AC17)
AC17_median = median(AC17)
AC17_mode = findmode(AC17) # User defined
AC17_sd = sd(AC17)
dataSummary(AC17_mean, AC17_median, AC17_mode, AC17_sd, "AC17") # User defined
hist(AC17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(AC17)
AC17_upper = AC17_mean + AC17_sd
AC17_lower = AC17_mean - AC17_sd
AC17_withinOneSd = which((AC17 <= AC17_upper) & (AC17 >= AC17_lower))
AC17_percentage = (length(AC17_withinOneSd) / length(AC17)) * 100
AC17_percentage
ACold_inRange = which(ACavgs14_16 >= 325 & ACavgs14_16 <= 350)
ACold_inRange
pnorm(325, mean = ACold_mean, sd = sqrt(ACold_variance))
ACold_mean = mean(ACavgs14_16)
ACold_variance = var(ACavgs14_16)
ACold_inRange = which(ACavgs14_16 >= 325 & ACavgs14_16 <= 350)
pnorm(325, mean = ACold_mean, sd = sqrt(ACold_variance))
ACavgs14_16 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
AC17 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
PPavgs14_16 = round(rnorm(36, runif(1, 33, 37), sqrt(runif(1, 6, 8))), 1)
PP17 = round(rnorm(36, runif(1, 33, 37), sqrt( runif(1, 6, 8))), 1)
knitr::kable(matrix(ACavgs14_16, ncol=12), caption = "ACavgs14_16")
knitr::kable(matrix(AC17, ncol=12), caption = "AC17")
knitr::kable(matrix(PPavgs14_16, ncol=12), caption = "PPavgs14_16")
knitr::kable(matrix(PP17, ncol=12), caption = "PP17")
findmode <- function(data) {
uniqueValue <- unique(data)
uniqueValue[which.max(tabulate(match(data, uniqueValue)))]
}
dataSummary <- function(mean, median, mode, sd, dataName) {
table = matrix(c(mean, median, mode, sd), ncol=1, byrow=TRUE)
colnames(table) <- c(dataName)
rownames(table) <- c("Mean", "Median", "Mode", "SD")
knitr::kable(table)
}
AC17_mean = mean(AC17)
AC17_median = median(AC17)
AC17_mode = findmode(AC17) # User defined
AC17_sd = sd(AC17)
dataSummary(AC17_mean, AC17_median, AC17_mode, AC17_sd, "AC17") # User defined
hist(AC17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(AC17)
AC17_upper = AC17_mean + AC17_sd
AC17_lower = AC17_mean - AC17_sd
AC17_withinOneSd = which((AC17 <= AC17_upper) & (AC17 >= AC17_lower))
AC17_percentage = (length(AC17_withinOneSd) / length(AC17)) * 100
PP17_mean = mean(PP17)
PP17_median = median(PP17)
PP17_mode = findmode(PP17) # User defined
PP17_sd = sd(PP17)
dataSummary(PP17_mean, PP17_median, PP17_mode, PP17_sd, "PP17") # User defined
hist(PP17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(PP17)
goodPercentageDays = which(PP17 >= 35.5)
AC17_belowAverage = which(AC17 < AC17_mean)
reallyGoodDays = intersect(goodPercentageDays, AC17_belowAverage)
reallyGoodDaysPercentage = (length(reallyGoodDays) / length(AC17)) * 100
ACold_mean = mean(ACavgs14_16)
ACold_variance = var(ACavgs14_16)
ACold_inRange = which(ACavgs14_16 >= 325 & ACavgs14_16 <= 350)
pnorm(325, mean = ACold_mean, sd = sqrt(ACold_variance))
pnorm(325, mean = ACold_mean, sd = sqrt(ACold_variance))
pnorm(350, mean = ACold_mean, sd = sqrt(ACold_variance))
pnorm(325, mean = ACold_mean, sd = sqrt(ACold_variance))
pnorm(350, mean = ACold_mean, sd = sqrt(ACold_variance), lower.tail = FALSE)
pnorm(325, mean = ACold_mean, sd = sqrt(ACold_variance))
pnorm(350, mean = ACold_mean, sd = sqrt(ACold_variance))
plot(ACavgs14_16, PPavgs14_16)
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
calculateSlope <- function(x, xMean, y, yMean){
((x - xMean) * (y - yMean)) / ((x - xMean)^2)
}
PPold_mean = mean(PPavgs14_16)
slope = sum(calculateSlope(x = ACavgs14_16[i], ACold_mean, PPavgs14_16[i], PPold_mean), i == 1, length(ACavgs14_16))
PPold_mean = mean(PPavgs14_16)
slope = sum(calculateSlope(x=ACavgs14_16[i], xMean=ACold_mean, y=PPavgs14_16[i], yMean=PPold_mean), i == 1, length(ACavgs14_16))
PPold_mean = mean(PPavgs14_16)
slope = sum(ACavgs14_16[i], i == 1, length(ACavgs14_16))
PPold_mean = mean(PPavgs14_16)
slope = sum(calculateSlope(x=ACavgs14_16, xMean=ACold_mean, y=PPavgs14_16, yMean=PPold_mean))
yIntercept = PPold_mean - (slope * ACold_mean)
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
lines(lowess(ACavgs14_16, PPavgs14_16), col="blue")
PPold_mean = mean(PPavgs14_16)
slope = sum(calculateSlope(x=ACavgs14_16, xMean=ACold_mean, y=PPavgs14_16, yMean=PPold_mean))
yIntercept = PPold_mean - (slope * ACold_mean)
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
lines(lowess(ACavgs14_16, PPavgs14_16), col="blue")
lines(slope*x + b, col="red")
PPold_mean = mean(PPavgs14_16)
slope = sum(calculateSlope(x=ACavgs14_16, xMean=ACold_mean, y=PPavgs14_16, yMean=PPold_mean))
yIntercept = PPold_mean - (slope * ACold_mean)
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
lines(lowess(ACavgs14_16, PPavgs14_16), col="blue")
abline(yIntercept, slope)
PPold_mean = mean(PPavgs14_16)
slope = sum(calculateSlope(x=ACavgs14_16, xMean=ACold_mean, y=PPavgs14_16, yMean=PPold_mean))
yIntercept = PPold_mean - (slope * ACold_mean)
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
abline(yIntercept, slope, col = "blue")
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
PPold_mean = mean(PPavgs14_16)
slope = sum(calculateSlope(x=ACavgs14_16, xMean=ACold_mean, y=PPavgs14_16, yMean=PPold_mean))
yIntercept = PPold_mean - (slope * ACold_mean)
abline(yIntercept, slope, col = "blue")
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
PPold_mean = mean(PPavgs14_16)
# Slope
m = sum(calculateSlope(x=ACavgs14_16, xMean=ACold_mean, y=PPavgs14_16, yMean=PPold_mean))
# Y-intercept
b = PPold_mean - (m * ACold_mean)
abline(b, m, col = "blue")
PPforAC = (m * 340) + b
ACforPP = (33.5 - b) / m
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
PPold_mean = mean(PPavgs14_16)
# Slope
m = sum(calculateSlope(x=ACavgs14_16, xMean=ACold_mean, y=PPavgs14_16, yMean=PPold_mean))
# Y-intercept
b = PPold_mean - (m * ACold_mean)
abline(b, m, col = "blue")
PPforAC = (m * 340) + b
ACforPP = (33.5 - b) / m
ACavgs14_16
PPavgs14_16
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
PPold_mean = mean(PPavgs14_16)
# Slope
m = sum(calculateSlope(x=ACavgs14_16, xMean=ACold_mean, y=PPavgs14_16, yMean=PPold_mean))
# Y-intercept
b = PPold_mean - (m * ACold_mean)
abline(b, m, col = "blue")
PPforAC = (m * 340) + b
ACforPP = (33.5 - b) / m
ACavgs14_16
"print(hello)"
PPavgs14_16
2
2^3
sum(2, 3, 4)
test = c(2, 3 , 4)
sum(test)
sum(test^2)
test2 = (1, 2, 3)
test2 = c(1, 2, 3)
sum(test*test2)
sum(c(2, 6, 12))
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
# Calculate linear regession line
n = length(ACavgs14_16)
sumY = sum(PPavgs14_16)
sumX = sum(ACavgs14_16)
sumXSquared = sum(ACavgs14_16^2)
sumOfXandY = sum(PPavgs14_16*ACavgs14_16)
# y-intercept
b = ((sumY*sumXSquared) - (sumX*sumOfXandY)) / ((n*sumXSquared) - (sumX^2))
# slope
m = ((n*sumOfXandY) - (sumX*sumY)) / ((n*sumXSquared) - (sumX^2))
abline(b, m, col = "blue")
PPforAC = (m * 340) + b
ACforPP = (33.5 - b) / m
PPforAC
ACforPP
b
m
33.5-b
-2.7921 / m
ACavgs14_16 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
AC17 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
PPavgs14_16 = round(rnorm(36, runif(1, 33, 37), sqrt(runif(1, 6, 8))), 1)
PP17 = round(rnorm(36, runif(1, 33, 37), sqrt( runif(1, 6, 8))), 1)
knitr::kable(matrix(ACavgs14_16, ncol=12), caption = "ACavgs14_16")
knitr::kable(matrix(AC17, ncol=12), caption = "AC17")
knitr::kable(matrix(PPavgs14_16, ncol=12), caption = "PPavgs14_16")
knitr::kable(matrix(PP17, ncol=12), caption = "PP17")
findmode <- function(data) {
uniqueValue <- unique(data)
uniqueValue[which.max(tabulate(match(data, uniqueValue)))]
}
dataSummary <- function(mean, median, mode, sd, dataName) {
table = matrix(c(mean, median, mode, sd), ncol=1, byrow=TRUE)
colnames(table) <- c(dataName)
rownames(table) <- c("Mean", "Median", "Mode", "SD")
knitr::kable(table)
}
calculateSlope <- function(x, xMean, y, yMean){
((x - xMean) * (y - yMean)) / ((x - xMean)^2)
}
AC17_mean = mean(AC17)
AC17_median = median(AC17)
AC17_mode = findmode(AC17) # User defined
AC17_sd = sd(AC17)
dataSummary(AC17_mean, AC17_median, AC17_mode, AC17_sd, "AC17") # User defined
hist(AC17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(AC17)
AC17_upper = AC17_mean + AC17_sd
AC17_lower = AC17_mean - AC17_sd
AC17_withinOneSd = which((AC17 <= AC17_upper) & (AC17 >= AC17_lower))
AC17_percentage = (length(AC17_withinOneSd) / length(AC17)) * 100
PP17_mean = mean(PP17)
PP17_median = median(PP17)
PP17_mode = findmode(PP17) # User defined
PP17_sd = sd(PP17)
dataSummary(PP17_mean, PP17_median, PP17_mode, PP17_sd, "PP17") # User defined
hist(PP17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(PP17)
goodPercentageDays = which(PP17 >= 35.5)
AC17_belowAverage = which(AC17 < AC17_mean)
reallyGoodDays = intersect(goodPercentageDays, AC17_belowAverage)
reallyGoodDaysPercentage = (length(reallyGoodDays) / length(AC17)) * 100
ACold_mean = mean(ACavgs14_16)
ACold_variance = var(ACavgs14_16)
ACold_inRange = which(ACavgs14_16 >= 325 & ACavgs14_16 <= 350)
ACold_cdf = pnorm(350, mean=ACold_mean, sd=sqrt(ACold_variance)) - pnorm(325, mean=ACold_mean, sd=sqrt(ACold_variance))
ACold_normalTest = abs((length(ACold_inRange) / length(ACavgs14_16)) - ACold_cdf)
DifferenceLimit = 0.5 # The allowable difference percentage
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
# Calculate linear regession line
n = length(ACavgs14_16)
sumY = sum(PPavgs14_16)
sumX = sum(ACavgs14_16)
sumXSquared = sum(ACavgs14_16^2)
sumOfXandY = sum(PPavgs14_16*ACavgs14_16)
# y-intercept
b = ((sumY*sumXSquared) - (sumX*sumOfXandY)) / ((n*sumXSquared) - (sumX^2))
# slope
m = ((n*sumOfXandY) - (sumX*sumY)) / ((n*sumXSquared) - (sumX^2))
abline(b, m, col = "blue")
PPforAC = (m * 340) + b
ACforPP = (33.5 - b) / m
PPforAC
ACforPP
confidence = 95
significance = 1 - (confidence/100)
a = qt(1-(significance/2), (AC17_n-1)) * (sd/sqrt(AC17_n))
AC17_n = length(AC17)
AC17_mean = mean(AC17)
AC17_median = median(AC17)
AC17_mode = findmode(AC17) # User defined
AC17_sd = sd(AC17)
dataSummary(AC17_mean, AC17_median, AC17_mode, AC17_sd, "AC17") # User defined
hist(AC17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(AC17)
AC17_upper = AC17_mean + AC17_sd
AC17_lower = AC17_mean - AC17_sd
AC17_withinOneSd = which((AC17 <= AC17_upper) & (AC17 >= AC17_lower))
AC17_percentage = (length(AC17_withinOneSd) / AC17_n) * 100
confidence = 95
significance = 1 - (confidence/100)
a = qt(1-(significance/2), (AC17_n-1)) * (sd/sqrt(AC17_n))
confidence = 95
significance = 1 - (confidence/100)
a = qt(1-(significance/2), (length(AC17)-1)) * (sd/sqrt(length(AC17)))
confidence = 95
significance = 1 - (confidence/100)
a = qt(1-(significance/2), (AC17_n-1)) * (AC17_sd/sqrt(AC17_n))
AC17_lower = AC17_mean - a
AC17_upper = AC17_mean + a
ACavgs14_16 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
AC17 = round(rnorm(36, runif(1, 300, 350), sqrt(runif(1, 420, 480))), 2)
PPavgs14_16 = round(rnorm(36, runif(1, 33, 37), sqrt(runif(1, 6, 8))), 1)
PP17 = round(rnorm(36, runif(1, 33, 37), sqrt( runif(1, 6, 8))), 1)
knitr::kable(matrix(ACavgs14_16, ncol=12), caption = "ACavgs14_16")
knitr::kable(matrix(AC17, ncol=12), caption = "AC17")
knitr::kable(matrix(PPavgs14_16, ncol=12), caption = "PPavgs14_16")
knitr::kable(matrix(PP17, ncol=12), caption = "PP17")
findmode <- function(data) {
uniqueValue <- unique(data)
uniqueValue[which.max(tabulate(match(data, uniqueValue)))]
}
dataSummary <- function(mean, median, mode, sd, dataName) {
table = matrix(c(mean, median, mode, sd), ncol=1, byrow=TRUE)
colnames(table) <- c(dataName)
rownames(table) <- c("Mean", "Median", "Mode", "SD")
knitr::kable(table)
}
AC17_n = length(AC17)
AC17_mean = mean(AC17)
AC17_median = median(AC17)
AC17_mode = findmode(AC17) # User defined
AC17_sd = sd(AC17)
dataSummary(AC17_mean, AC17_median, AC17_mode, AC17_sd, "AC17") # User defined
hist(AC17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(AC17)
AC17_upper = AC17_mean + AC17_sd
AC17_lower = AC17_mean - AC17_sd
AC17_withinOneSd = which((AC17 <= AC17_upper) & (AC17 >= AC17_lower))
AC17_percentage = (length(AC17_withinOneSd) / AC17_n) * 100
confidence = 95
significance = 1 - (confidence/100)
a = qt(1-(significance/2), (AC17_n-1)) * (AC17_sd/sqrt(AC17_n))
AC17_lower = AC17_mean - a
AC17_upper = AC17_mean + a
PP17_mean = mean(PP17)
PP17_median = median(PP17)
PP17_mode = findmode(PP17) # User defined
PP17_sd = sd(PP17)
dataSummary(PP17_mean, PP17_median, PP17_mode, PP17_sd, "PP17") # User defined
hist(PP17,  xlab="Daily Assembly Cost", col="dodgerblue3")
boxplot(PP17)
goodPercentageDays = which(PP17 >= 35.5)
AC17_belowAverage = which(AC17 < AC17_mean)
reallyGoodDays = intersect(goodPercentageDays, AC17_belowAverage)
reallyGoodDaysPercentage = (length(reallyGoodDays) / AC17_n) * 100
ACold_mean = mean(ACavgs14_16)
ACold_variance = var(ACavgs14_16)
ACold_inRange = which(ACavgs14_16 >= 325 & ACavgs14_16 <= 350)
ACold_cdf = pnorm(350, mean=ACold_mean, sd=sqrt(ACold_variance)) - pnorm(325, mean=ACold_mean, sd=sqrt(ACold_variance))
ACold_normalTest = abs((length(ACold_inRange) / length(ACavgs14_16)) - ACold_cdf)
DifferenceLimit = 0.5 # The allowable difference percentage
plot(ACavgs14_16, PPavgs14_16, xlab = "AC averages from 2014 to 2016",  ylab = "PP averages from 2014 to 2016")
# Calculate linear regession line
n = length(ACavgs14_16)
sumY = sum(PPavgs14_16)
sumX = sum(ACavgs14_16)
sumXSquared = sum(ACavgs14_16^2)
sumYSquared = sum(PPavgs14_16^2)
sumOfXandY = sum(PPavgs14_16*ACavgs14_16)
# y-intercept
b = ((sumY*sumXSquared) - (sumX*sumOfXandY)) / ((n*sumXSquared) - (sumX^2))
# slope
m = ((n*sumOfXandY) - (sumX*sumY)) / ((n*sumXSquared) - (sumX^2))
abline(b, m, col = "blue")
PPforAC = (m * 340) + b
ACforPP = (33.5 - b) / m
r = ((n*sumOfXandY) - (sumX*sumY)) / sqrt(((n*sumXSquared) - (sumX^2)) * ((n*sumYSquared) - (sumY^2)))
coefficientOfDetermination = r^2
significance = 0.05
PP17_n = length(PP17)
criticalValue = abs(qt(significance/2,PP17_n-1))
t = (mean - average)/(sd/sqrt(PP17_n))
significance = 0.05
PP17_n = length(PP17)
criticalValue = abs(qt(significance/2, PP17_n-1))
t = (PP17_mean - newerMean)/(sqrt(newerVariance)/sqrt(PP17_n))
newerMean = mean(PPavgs14_16)
newerVariance = newVariance / sampleSize
sampleSize = 20
newMean = mean(PPavgs14_16)
newVariance = var(PPavgs14_16) / sampleSize
newerMean = mean(PPavgs14_16)
newerVariance = newVariance / sampleSize
significance = 0.05
PP17_n = length(PP17)
criticalValue = abs(qt(significance/2, PP17_n-1))
t = (PP17_mean - newerMean)/(sqrt(newerVariance)/sqrt(PP17_n))
reject = t > criticalValue
pval = 2*pt(-abs(t), df=n-1)
unlink('wentworth/R/FInal Project/Test_cache', recursive = TRUE)
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
debugSource('~/wentworth/machine-learning/chapter_1/lesson_02.R')
debugSource('~/wentworth/machine-learning/chapter_1/lesson_02.R')
View(insect)
View(insect)
debugSource('~/wentworth/machine-learning/chapter_1/lesson_02.R')
debugSource('~/wentworth/machine-learning/chapter_1/lesson_02.R')
View(insect)
debugSource('~/wentworth/machine-learning/chapter_1/lesson_02.R')
debugSource('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
cc = insect$c
length <- length(cc)
for (i in 1:length) {
if (cc[i] == 'g') {
cc[i] = 1
} else {
cc[i] = 2
}
}
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
cc = insect$c
length <- length(cc)
warnings()
for (i in 1:length) {
if (cc[i] == 'g') {
cc[i] = 1
} else {
cc[i] = 2
}
}
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
for (i in 1:length) {
if (cc[i] == 'g') {
cc[i] = 1
} else {
cc[i] = 2
}
}
installed.packages("scatterplot3d")
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
library(scatterplot3d)
data("iris")
print(iris)
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
colors <- c("blue", "brown1")
colors <- colors[as.numeric(iris$Species)]
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
color <- c("blue", "brown1")
color <- colors[as.numeric(iris$Species)]
library(scatterplot3d)
data("iris")
print(iris)
color <- c("blue", "brown1")
color <- colors[as.numeric(iris$Species)]
color <- color[as.numeric(iris$Species)]
View(iris)
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
scatterplot3d(iris(,1:3), pch = 16,color = color)
source('~/wentworth/machine-learning/chapter_1/lesson_02.R')
library(scatterplot3d)
data("iris")
print(iris)
color <- c("blue", "brown1")
color <- color[as.numeric(iris$Species)]
scatterplot3d(iris(,1:3), pch = 16,color = color)
scatterplot3d(iris[,1:3], pch = 16,color = color)
scatterplot3d(iris[,1:3], pch = 16,color = color)
dev.off()
